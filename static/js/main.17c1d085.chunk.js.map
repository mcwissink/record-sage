{"version":3,"sources":["records.ts","schema.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Records","provider","Sheets","init","schema","a","isAuthenticated","signIn","signOut","insert","table","row","RecordsProvider","_schema","Error","this","_table","_row","api","gapi","initialized","start","getA1Notation","end","length","client","sheets","spreadsheets","values","append","spreadsheetId","getSpreadSheetId","valueInputOption","insertDataOption","range","response","console","log","Promise","resolve","reject","load","apiKey","clientId","scope","discoveryDocs","error","column","a1Column","columnReducer","quotient","Math","floor","remainder","alphabet","localStorage","getItem","auth2","getAuthInstance","isSignedIn","get","sheetId","body","JSON","parse","create","properties","title","Date","toLocaleString","map","data","startRow","startColumn","rowData","columns","header","userEnteredValue","stringValue","setItem","App","useState","setIsAuthenticated","records","useRef","useEffect","getAuthenticated","current","onSignIn","onSignOut","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17c1d085.chunk.js","sourcesContent":["export type Schema = Array<{\n    table: string;\n    columns: string[];\n}>;\n\nexport class Records {\n    constructor(\n        private provider: RecordsProvider = new Sheets(),\n    ) {\n    }\n\n    init = async (schema: Schema) => {\n        return await this.provider.init(schema);\n    }\n\n    isAuthenticated = async () => {\n        return await this.provider.isAuthenticated();\n    }\n\n    signIn = async () => {\n        return await this.provider.signIn();\n    }\n\n    signOut = async () => {\n        return await this.provider.signOut();\n    }\n\n    insert = async (table: string, row: Array<string>) => {\n        return await this.provider.insert(table, row);\n    }\n}\n\n\nclass RecordsProvider {\n    async init(_schema: Schema) {\n        throw new Error(`'init' is not implemented`);\n    }\n    async isAuthenticated() {\n        return false;\n    };\n    async signIn() {\n        return await this.isAuthenticated();\n    }\n    async signOut() {\n        return await this.isAuthenticated();\n    }\n    async insert(_table: string, _row: Array<string>) {\n        throw new Error(`'insert' is not implemented`);\n    }\n}\n\nexport class Sheets extends RecordsProvider {\n    constructor(\n        private api = gapi,\n        private initialized?: Promise<void>,\n    ) {\n        super();\n        this.initialized = new Promise((resolve, reject) => {\n            this.api.load('client:auth2', async () => {\n                try {\n                    await this.api.client.init({\n                        apiKey: 'AIzaSyCNEjUa-oT-sppE2yix52q4KeudcJpdIXw',\n                        clientId: '794158492809-ukkr1lfsml3ghmclr4po0rfongru44dq.apps.googleusercontent.com',\n                        scope: 'https://www.googleapis.com/auth/spreadsheets',\n                        discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n                    });\n                    resolve();\n                } catch (error) {\n                    console.error(error);\n                    reject(error);\n                }\n            });\n        });\n    }\n\n    // https://docs.microsoft.com/en-US/office/troubleshoot/excel/convert-excel-column-numbers\n    // Convert zero-based row/column index to A1 notation \n    private static alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    private getA1Notation(row: number, column: number) {\n        let a1Column = '';\n        let columnReducer = column + 1;\n        while (--columnReducer >= 0) {\n            const quotient = Math.floor(columnReducer / 26);\n            const remainder = columnReducer % 26;\n            a1Column = Sheets.alphabet[remainder] + a1Column;\n            columnReducer = quotient;\n        }\n        return `${a1Column}${row + 1}`;\n    }\n\n    private getSpreadSheetId() {\n        return localStorage.getItem('sheetId');\n    }\n\n    async isAuthenticated() {\n        await this.initialized;\n        return this.api.auth2.getAuthInstance().isSignedIn.get();\n    }\n\n    async signIn() {\n        await this.api.auth2.getAuthInstance().signIn()\n        return this.isAuthenticated();\n    }\n\n    async signOut() {\n        await this.api.auth2.getAuthInstance().signOut();\n        return this.isAuthenticated();\n    }\n\n    async init(schema: Schema) {\n        const sheetId = this.getSpreadSheetId();\n        if (sheetId) {\n            console.log(sheetId);\n            const { body } = await (this.api.client as any).sheets.spreadsheets.get({\n                spreadsheetId: sheetId\n            });\n            console.log(JSON.parse(body));\n        }\n        const { body } = await (this.api.client as any).sheets.spreadsheets.create({\n            properties: {\n                title: `Record Sage - ${new Date().toLocaleString()}`\n            },\n            sheets: schema.map(({ table, columns }) => ({\n                properties: {\n                    title: table,\n                },\n                data: [\n                    {\n                        startRow: 0,\n                        startColumn: 0,\n                        rowData: [\n                            {\n                                values: columns.map(header => ({\n                                    userEnteredValue: {\n                                        stringValue: header\n                                    }\n                                }))\n                            }\n                        ]\n                    }\n                ]\n            })),\n        });\n        const { spreadsheetId } = JSON.parse(body);\n        console.log(spreadsheetId);\n        localStorage.setItem('sheetId', spreadsheetId);\n    }\n\n    insert = async (table: string, row: Array<string>) => {\n        const start = this.getA1Notation(1, 0);\n        const end = this.getA1Notation(1, row.length - 1);\n        const response = await (this.api.client as any).sheets.spreadsheets.values.append({\n            spreadsheetId: this.getSpreadSheetId(),\n            valueInputOption: 'USER_ENTERED',\n            insertDataOption: 'INSERT_ROWS',\n            range: `${table}!${start}:${end}`,\n            values: [row],\n        });\n        console.log(response);\n    }\n}\n","import { Schema } from \"./records\";\n\nexport const schema: Schema = [\n    {\n        table: 'ChemicalApplication',\n        columns: ['date', 'field', 'crop', 'acres', 'chemical', 'amount']\n    },\n    {\n        table: 'Chemical',\n        columns: ['name']\n    },\n    {\n        table: 'Field',\n        columns: ['name']\n    }\n];\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Records } from './records';\nimport { schema } from './schema';\nimport './App.css';\n\nconst App: React.FC = () => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const records = useRef(new Records());\n\n    useEffect(() => {\n        const getAuthenticated = async () => {\n            setIsAuthenticated(await records.current.isAuthenticated());\n        };\n        getAuthenticated();\n    }, []);\n\n    const onSignIn = async () => {\n        setIsAuthenticated(await records.current.signIn());\n    }\n\n    const onSignOut = async () => {\n        setIsAuthenticated(await records.current.signOut());\n    }\n\n    return (\n        <div className=\"App\">\n            {isAuthenticated ? (\n                <>\n                    <button onClick={onSignOut}>Sign Out</button>\n                    <button onClick={() => records.current.init(schema)}>Init</button>\n                    <button onClick={() => records.current.insert('Chemical', ['Water'])}>Test Insert</button>\n                </>\n            ) : (\n                <button onClick={onSignIn}>Sign In</button>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}