{"version":3,"sources":["records.ts","providers/sheets/provider.ts","schema.ts","use-records.ts","providers/sheets/index.tsx","providers/sheets/Login.tsx","providers/sheets/Setup.tsx","RecordEntry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RecordsProvider","_options","a","Error","this","isAuthenticated","_table","_row","SheetsProvider","api","gapi","initialized","insert","table","row","start","getA1Notation","end","length","client","sheets","spreadsheets","values","append","spreadsheetId","getSpreadsheetId","valueInputOption","insertDataOption","range","getRowCount","get","body","JSON","parse","find","sheet","properties","title","gridProperties","rowCount","schema","columns","Promise","resolve","reject","load","init","apiKey","clientId","scope","discoveryDocs","console","error","column","a1Column","columnReducer","quotient","Math","floor","remainder","alphabet","localStorage","getItem","spreadsheetSchemaKey","setItem","stringify","spreadsheetIdKey","auth2","getAuthInstance","isSignedIn","Boolean","signIn","signOut","removeItem","getSchema","tableSchema","options","setSpreadsheetId","setSchema","concat","rows","map","create","Date","toLocaleString","columnCount","data","startRow","startColumn","rowData","header","userEnteredValue","stringValue","String","value","records","Login","Setup","provider","isConnected","connect","disconnect","login","logout","useRecords","onClick","useState","onSubmit","e","preventDefault","onChange","target","type","set","isInitialized","initialize","RecordEntry","setTable","setRows","setInsert","useEffect","then","split","defaultValue","disabled","i","cell","j","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0a9d84.chunk.js","sourcesContent":["import React from 'react';\n\nexport type Schema = Array<{\n    table: string;\n    columns: string[];\n    rows?: Array<Array<number | string>>;\n}>;\n\nexport type Provider = {\n    RecordsProvider: RecordsProvider;\n    Login: React.VFC;\n    Setup: React.VFC;\n}\n\nexport class Records {\n    public Setup: React.VFC;\n    public Login: React.VFC;\n    private provider: RecordsProvider;\n    constructor(\n        { RecordsProvider, Login, Setup }: Provider,\n    ) {\n        this.Setup = Setup;\n        this.Login = Login;\n        this.provider = RecordsProvider;\n    }\n\n    isAuthenticated = async () => {\n        return await this.provider.isAuthenticated();\n    }\n\n    isConnected = async () => {\n        return await this.provider.isConnected();\n    }\n\n    connect = async (options: SetupOptions) => {\n        return await this.provider.connect(options);\n    }\n\n    disconnect = async () => {\n        return await this.provider.disconnect();\n    }\n\n    login = async () => {\n        return await this.provider.login();\n    }\n\n    logout = async () => {\n        return await this.provider.logout();\n    }\n\n    schema = (table: string) => {\n        return this.provider.schema(table);\n    }\n\n    insert = async (table: string, row: Array<string>) => {\n        return await this.provider.insert(table, row);\n    }\n\n    get = async (table: string) => {\n        return await this.provider.get(table);\n    }\n}\n\nexport type SetupOptions<T extends Record<string, any> = Record<string, any>> = {\n    schema: Schema\n} | T;\n\nexport class RecordsProvider {\n    async connect(_options: SetupOptions): Promise<void> {\n        throw new Error(`'connect' is not implemented`);\n    }\n    async disconnect(): Promise<void> {\n        throw new Error(`'disconnect' is not implemented`);\n    }\n    async isAuthenticated() {\n        return false;\n    };\n    async isConnected() {\n        return false;\n    };\n    async login() {\n        return await this.isAuthenticated();\n    }\n    async logout() {\n        return await this.isAuthenticated();\n    }\n    schema(_table: string) {\n        throw new Error(`'schema' is not implemented`);\n    }\n    async insert(_table: string, _row: Array<string>) {\n        throw new Error(`'insert' is not implemented`);\n    }\n    async get(_table: string): Promise<any> {\n        throw new Error(`'get' is not implemented`);\n    }\n}\n\n","import { RecordsProvider, Schema, SetupOptions } from '../../records';\n\nexport class SheetsProvider extends RecordsProvider {\n    constructor(\n        private api = gapi,\n        private initialized?: Promise<void>,\n    ) {\n        super();\n        this.initialized = new Promise((resolve, reject) => {\n            this.api.load('client:auth2', async () => {\n                try {\n                    await this.api.client.init({\n                        apiKey: 'AIzaSyCNEjUa-oT-sppE2yix52q4KeudcJpdIXw',\n                        clientId: '794158492809-ukkr1lfsml3ghmclr4po0rfongru44dq.apps.googleusercontent.com',\n                        scope: 'https://www.googleapis.com/auth/spreadsheets',\n                        discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n                    });\n                    resolve();\n                } catch (error) {\n                    console.error(error);\n                    reject(error);\n                }\n            });\n        });\n    }\n\n    // https://docs.microsoft.com/en-US/office/troubleshoot/excel/convert-excel-column-numbers\n    // Convert zero-based row/column index to A1 notation \n    private static alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    private getA1Notation(row: number, column: number) {\n        let a1Column = '';\n        let columnReducer = column + 1;\n        while (--columnReducer >= 0) {\n            const quotient = Math.floor(columnReducer / 26);\n            const remainder = columnReducer % 26;\n            a1Column = SheetsProvider.alphabet[remainder] + a1Column;\n            columnReducer = quotient;\n        }\n        return `${a1Column}${row + 1}`;\n    }\n\n    private static spreadsheetSchemaKey = 'spreadsheetSchema';\n    private getSchema(): Schema {\n        const schema = localStorage.getItem(SheetsProvider.spreadsheetSchemaKey)\n        if (schema) {\n            return JSON.parse(schema);\n        }\n        throw new Error('Failed to load schema');\n    }\n\n    private setSchema(schema: Schema) {\n        return localStorage.setItem(SheetsProvider.spreadsheetSchemaKey, JSON.stringify(schema));\n    }\n\n    private static spreadsheetIdKey = 'spreadsheedId';\n    private getSpreadsheetId() {\n        return localStorage.getItem(SheetsProvider.spreadsheetIdKey);\n    }\n\n    private setSpreadsheetId(spreadsheetId: string) {\n        localStorage.setItem(SheetsProvider.spreadsheetIdKey, spreadsheetId);\n    }\n\n    async isAuthenticated() {\n        await this.initialized;\n        return this.api.auth2.getAuthInstance().isSignedIn.get();\n    }\n\n    async isConnected() {\n        await this.initialized;\n        return Boolean(this.getSpreadsheetId());\n    }\n\n    async login() {\n        await this.api.auth2.getAuthInstance().signIn()\n        return this.isAuthenticated();\n    }\n\n    async logout() {\n        await this.api.auth2.getAuthInstance().signOut();\n        return this.isAuthenticated();\n    }\n\n    async disconnect() {\n        localStorage.removeItem(SheetsProvider.spreadsheetIdKey);\n    }\n\n    schema(table: string) {\n        const schema = this.getSchema();\n        const tableSchema = schema.find(({ table: key }) => key === table);\n        if (tableSchema) {\n            return tableSchema;\n        }\n        throw new Error('Table does not exist');\n    }\n\n    async connect(options: SetupOptions<{ spreadsheetId: string }>) {\n        if ('spreadsheetId' in options) {\n            await (this.api.client as any).sheets.spreadsheets.get({\n                spreadsheetId: options.spreadsheetId\n            });\n            this.setSpreadsheetId(options.spreadsheetId);\n        } else {\n            this.setSchema(options.schema);\n            const schema = options.schema.concat([{\n                table: 'SheetsTableData',\n                columns: ['table', 'count', 'sync'],\n                rows: options.schema.map(({ table, rows }) => ([\n                    table, rows?.length ?? 0, 'full'\n                ])),\n            }]);\n            const { body } = await (this.api.client as any).sheets.spreadsheets.create({\n                properties: {\n                    title: `Record Sage - ${new Date().toLocaleString()}`\n                },\n                sheets: schema.map(({ table, columns, rows }) => ({\n                    properties: {\n                        title: table,\n                        gridProperties: {\n                            rowCount: (rows?.length ?? 0) + 1,\n                            columnCount: columns.length,\n                        },\n                    },\n                    data: [\n                        {\n                            startRow: 0,\n                            startColumn: 0,\n                            rowData: [\n                                {\n                                    values: columns.map(header => ({\n                                        userEnteredValue: {\n                                            stringValue: String(header)\n                                        }\n                                    }))\n                                }\n                            ].concat(rows?.map(row => ({\n                                values: row.map(value => ({\n                                    userEnteredValue: {\n                                        stringValue: String(value)\n                                    }\n                                }))\n                            })) ?? []),\n                        },\n                    ],\n                })),\n            });\n            const { spreadsheetId } = JSON.parse(body);\n            this.setSpreadsheetId(spreadsheetId);\n        }\n    }\n\n    insert = async (table: string, row: Array<string>) => {\n        const start = this.getA1Notation(1, 0);\n        const end = this.getA1Notation(1, row.length - 1);\n        await (this.api.client as any).sheets.spreadsheets.values.append({\n            spreadsheetId: this.getSpreadsheetId(),\n            valueInputOption: 'USER_ENTERED',\n            insertDataOption: 'INSERT_ROWS',\n            range: `${table}!${start}:${end}`,\n            values: [row],\n        });\n    }\n\n    private getRowCount = async (table: string) => {\n        try {\n            const { body } = await (this.api.client as any).sheets.spreadsheets.get({\n\n                spreadsheetId: this.getSpreadsheetId(),\n            });\n            const { sheets } = JSON.parse(body);\n            const { properties } = sheets.find((sheet: any) => sheet.properties.title === table);\n            // Subtract 1 to account for header row\n            return properties.gridProperties.rowCount - 1;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    get = async (table: string): Promise<string[][]> => {\n        const rowCount = await this.getRowCount(table);\n        if (rowCount > 0) {\n            const start = this.getA1Notation(1, 0);\n            const end = this.getA1Notation(1 + rowCount, this.schema(table).columns.length - 1);\n\n            const { body } = await (this.api.client as any).sheets.spreadsheets.values.get({\n\n                spreadsheetId: this.getSpreadsheetId(),\n                range: `${table}!${start}:${end}`,\n            });\n            const { values } = JSON.parse(body);\n            return values;\n        } else {\n            return [];\n        }\n    }\n}\n","import { Schema } from \"./records\";\n\nexport const schema: Schema = [\n    {\n        table: 'ChemicalApplication',\n        columns: ['date', 'field', 'crop', 'acres', 'chemical', 'amount']\n    },\n    {\n        table: 'Chemical',\n        columns: ['name']\n    },\n    {\n        table: 'Field',\n        columns: ['name']\n    },\n];\n","import create from 'zustand';\nimport { Records, SetupOptions } from './records';\nimport * as Providers from './providers';\n\nconst records = new Records(Providers.Sheets);\n\nexport const Setup = records.Setup;\nexport const Login = records.Login;\n\ntype State = {\n    isInitialized: boolean;\n    isAuthenticated: boolean;\n    isConnected: boolean;\n    records: Records;\n    connect: (options: SetupOptions) => void;\n    disconnect: () => void;\n    initialize: () => void;\n    login: () => void;\n    logout: () => void;\n}\nexport const useRecords = create<State>((set, get) => ({\n    isInitialized: false,\n    isAuthenticated: false,\n    isConnected: false,\n    records,\n    connect: async (options) => {\n        await get().records.connect(options)\n        set({\n            isConnected: await get().records.isConnected(),\n        })\n    },\n    disconnect: async () => {\n        await get().records.disconnect()\n        set({\n            isConnected: await get().records.isConnected(),\n        })\n    },\n    initialize: async () => set({\n        isInitialized: true,\n        isAuthenticated: await get().records.isAuthenticated(),\n        isConnected: await get().records.isConnected(),\n    }),\n    login: async () => set({\n        isAuthenticated: await get().records.login()\n    }),\n    logout: async () => set({\n        isAuthenticated: await get().records.logout()\n    }),\n}));\n","import { SheetsProvider } from './provider';\nimport { Provider } from '../../records';\nimport { Login } from './Login';\nimport { Setup } from './Setup';\n\nexport const Sheets: Provider = {\n    RecordsProvider: new SheetsProvider(),\n    Login,\n    Setup,\n}\n","import React from 'react'\nimport { useRecords } from '../../use-records';\n\nexport const Login: React.VFC = () => {\n    const { login } = useRecords();\n\n    return (\n        <button onClick={login}>\n            Login\n        </button>\n    );\n}\n","import React, { useState } from 'react'\nimport { useRecords } from '../../use-records';\nimport { schema } from '../../schema';\n\nexport const Setup: React.VFC = () => {\n    const { connect } = useRecords();\n    const [spreadsheetId, setSpreadsheetId] = useState('');\n\n    return (\n        <>\n            <div>Link to an existing spreadsheet</div>\n            <form onSubmit={e => {\n                e.preventDefault();\n                connect({ spreadsheetId });\n            }}>\n                <label>\n                    Spreadsheet ID:{' '}\n                    <input value={spreadsheetId} onChange={(e) => setSpreadsheetId(e.target.value)} />\n                </label>\n                <button type=\"submit\">Submit</button>\n            </form>\n            <hr />\n            <button onClick={() => connect({ schema })}>Create</button>\n        </>\n    );\n}\n","import React, { useEffect, useState } from 'react'\nimport { useRecords } from './use-records';\nimport { schema } from './schema';\n\nexport const RecordEntry: React.VFC = () => {\n    const [table, setTable] = useState('');\n    const [rows, setRows] = useState<string[][]>([]);\n    const [insert, setInsert] = useState('');\n    const {\n        records,\n        disconnect,\n    } = useRecords();\n\n    useEffect(() => {\n        if (table) {\n            records.get(table).then(setRows);\n        }\n    }, [records, table]);\n\n    const onSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        await records.insert(table, insert.split(','));\n        setInsert('');\n        records.get(table).then(setRows);\n    };\n\n    return (\n        <div>\n            <select defaultValue={'empty'} onChange={e => setTable(e.target.value)}>\n                <option disabled value={'empty'}>Select a table</option>\n                {schema.map(({ table }) => (\n                    <option key={table} value={table}>{table}</option>\n                ))}\n            </select>\n            <br />\n            <br />\n            {rows.map((row, i) => (\n                <div key={i}>\n                    {row.map((cell, j) => <span key={j}>{cell}</span>)}\n                </div>\n            ))}\n            <br />\n            <form onSubmit={onSubmit}>\n                <input onChange={e => setInsert(e.target.value)} />\n                <button>Submit</button>\n            </form>\n            <br />\n            <button onClick={disconnect}>Disconnect</button>\n        </div >\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useRecords, Setup, Login } from './use-records';\nimport { RecordEntry } from './RecordEntry';\nimport './App.css';\n\nconst App: React.FC = () => {\n    const {\n        initialize,\n        isInitialized,\n        isAuthenticated,\n        isConnected,\n    } = useRecords();\n\n    useEffect(() => {\n        initialize();\n    }, [initialize]);\n\n    return (\n        <div className=\"App\">\n            {isInitialized ? (\n                isAuthenticated ? (\n                    isConnected ? (\n                        <RecordEntry />\n                    ) : <Setup />\n                ) : <Login />\n            ) : <div>Loading...</div>}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}